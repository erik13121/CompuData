
@{
    ViewBag.Title = "AddEquipmentBooking";
    Layout = "~/Views/Shared/_Layout.cshtml";
    HttpContext.Current.Response.Cache.SetAllowResponseInBrowserHistory(false);
    HttpContext.Current.Response.Cache.SetCacheability(HttpCacheability.NoCache);
}
<nav id="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="../MainMenu">Home</a></li>
        <li class="breadcrumb-item"><a href="../EquipmentManagementMenu">Equipment Menu</a></li>
        <li class="breadcrumb-item"><a href="../EquipmentBookings">Equipment Bookings</a></li>
        <li class="breadcrumb-item"><a href="../SelectEquipment">Select Equipment</a></li>
        <li class="breadcrumb-item active" aria-current="page">Add Equipment Booking</li>
    </ol>
</nav>
@Html.Partial("_ProfilePartial")
@{Session["Referrer"] = System.IO.Path.GetFileName(Request.Url.AbsolutePath);
    Session["Query"] = Request.Url.Query;}
<div id="table_background">
    <h2>Equipment Bookings</h2>
    <div id="calendar"></div>
    <div id="backButton" onclick="window.location.href = '@Url.Action("Index", "SelectEquipment")'">Back</div>
</div>

<div id="myModal" class="modal fade" role="dialog">
    <div class="vertical-alignment-helper">
        <div class="modal-dialog vertical-align-center">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title"><span id="eventTitle"></span></h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col text-center">
                            <button id="btnEdit" class="btn btn-default btn-sm pull-right">
                                <span class="glyphicon glyphicon-pencil"></span> Edit Booking
                            </button>
                        </div>
                        <div class="col text-center">
                            <button id="btnAdjust" class="btn btn-default btn-sm pull-right">
                                <span class="glyphicon glyphicon-pencil"></span> Adjust Pages Printed
                            </button>
                        </div>
                        <div class="col text-center">
                            <button id="btnRemovePages" class="btn btn-default btn-sm pull-right">
                                <span class="glyphicon glyphicon-trash"></span> Remove Pages Printed
                            </button>
                        </div>
                        <div class="col text-center">
                            <button id="btnRemove" class="btn btn-default btn-sm pull-right">
                                <span class="glyphicon glyphicon-trash"></span> Remove Booking
                            </button>
                        </div>
                    </div>
                    <p id="pDetails"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="createEventModal" class="modal fade">
    <div class="vertical-alignment-helper">
        <div class="modal-dialog vertical-align-center">
            <div class="modal-content">
                <div class="modal-header">
                    <h4>Add an Equipment Booking</h4>
                    <button type="button" class="close" data-dismiss="modal">
                        <span aria-hidden="true">&times;</span> <span class="sr-only">close</span>
                    </button>
                </div>
                <div id="modalBody" class="modal-body">
                    <div class="form-group">
                        <input type="text" id="bookingReason" class="form-control" />
                    </div>
                    <div class="row">
                        <div class="form-group col">
                            <label for="bookingStartTime">Start Time:</label>
                            <input type="text" id="bookingStartTime" class="form-control" />
                        </div>
                        <div class="form-group col pull-right">
                            <label for="bookingEndTime">End Time:</label>
                            <input type="text" id="bookingEndTime" class="form-control" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col">
                            <label for="bookingStartTime">Project using Equipment:</label>
                            @Html.DropDownList("Projects", (IEnumerable<SelectListItem>)ViewBag.Projects, new { id = "ddlProjects", @class = "form-control" })
                        </div>
                        <div class="form-group col pull-right">
                            <label for="bookingEndTime">User of Equipment:</label>
                            @Html.DropDownList("Users", (IEnumerable<SelectListItem>)ViewBag.Users, new { id = "ddlUsers", @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn" data-dismiss="modal" aria-hidden="true">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-primary" id="submitButton">Save</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="myModalSave" class="modal fade" role="dialog">
    <div class="vertical-alignment-helper">
        <div class="modal-dialog vertical-align-center">
            <div class="modal-content">
                <div class="modal-header">
                    <h4>Edit an Equipment Booking</h4>
                    <button type="button" class="close" data-dismiss="modal">
                        <span aria-hidden="true">&times;</span> <span class="sr-only">close</span>
                    </button>
                </div>
                <div id="modalBody" class="modal-body">
                    <div class="form-group">
                        <label for="bookingReasonEdit">Equipment Details:</label>
                        <input type="text" id="bookingReasonEdit" class="form-control" />
                    </div>
                    <div class="row">
                        <div class="form-group col">
                            <label for="bookingStartTimeEdit">Start Time:</label>
                            <input type="text" id="bookingStartTimeEdit" class="form-control" />
                        </div>
                        <div class="form-group col pull-right">
                            <label for="bookingEndTimeEdit">End Time:</label>
                            <input type="text" id="bookingEndTimeEdit" class="form-control" />
                            <input type="hidden" id="max" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col">
                            <label for="ddlProjectsEdit">Project using Equipment:</label>
                            @Html.DropDownList("Projects", (IEnumerable<SelectListItem>)ViewBag.Projects, new { id = "ddlProjectsEdit", @class = "form-control" })
                        </div>
                        <div class="form-group col pull-right">
                            <label for="ddlUsersEdit">User of Equipment:</label>
                            @Html.DropDownList("Users", (IEnumerable<SelectListItem>)ViewBag.Users, new { id = "ddlUsersEdit", @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn" data-dismiss="modal" aria-hidden="true">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-primary" id="submitEditButton">Save</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="myModalAdjust" class="modal fade" role="dialog">
    <div class="vertical-alignment-helper">
        <div class="modal-dialog vertical-align-center">
            <div class="modal-content">
                <div class="modal-header">
                    <h4>Adjust Pages Printed in Equipment Booking</h4>
                    <button type="button" class="close" data-dismiss="modal">
                        <span aria-hidden="true">&times;</span> <span class="sr-only">close</span>
                    </button>
                </div>
                <div id="modalBody" class="modal-body">
                    <div class="form-group">
                        <label for="bookingReasonAdjust">Equipment Details:</label>
                        <input type="text" id="bookingReasonAdjust" class="form-control" />
                    </div>
                    <div class="row">
                        <div class="form-group col">
                            <label for="bookingStartTimeAdjust">Start Time:</label>
                            <input type="text" id="bookingStartTimeAdjust" class="form-control" />
                        </div>
                        <div class="form-group col pull-right">
                            <label for="bookingEndTimeAdjust">End Time:</label>
                            <input type="text" id="bookingEndTimeAdjust" class="form-control" />
                            <input type="hidden" id="max" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col">
                            <label for="bookingProjectAdjust">Project using Equipment:</label>
                            <input type="text" id="bookingProjectAdjust" class="form-control" />
                        </div>
                        <div class="form-group col pull-right">
                            <label for="bookingUserAdjust">User of Equipment:</label>
                            <input type="text" id="bookingUserAdjust" class="form-control" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col">
                            <label for="bookingPagesAdjust">Pages Printed:</label>
                            <input type="number" id="bookingPagesAdjust" class="form-control" min="0" value="0" />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn" data-dismiss="modal" aria-hidden="true">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-primary" id="submitAdjustButton">Save</button>
                </div>
            </div>
        </div>
    </div>
</div>

<link href="~/Content/jquery.timepicker.min.css" rel="stylesheet" />
<link href="~/Content/fullcalendar.min.css" rel="stylesheet" />
<script src="~/Scripts/moment.min.js"></script>
<script src="~/Scripts/jquery.min.js"></script>
<script src="~/Scripts/jquery-ui.min.js"></script>
<script src="~/Scripts/jquery.timepicker.min.js"></script>
<script src="~/Scripts/fullcalendar.min.js"></script>
<style>
    form {
        display: table;
        height: 100%;
        width: 100%;
    }

    .center-block {
        float: none;
    }

    .table-heading {
        color: #0AA633;
    }

    #table_background {
        position: absolute;
        padding: 15px;
        padding-top: 20px;
        padding-bottom: 20px;
        background-color: rgba(128, 128, 128, 0.95);
        height: auto;
        min-width: 600px;
        border-width: 2px;
        border-radius: 50px 50px 50px 50px;
    }

    #addButton {
        position: relative;
        display: table;
        margin-left: auto;
        bottom: 0;
        z-index: 10000;
        text-decoration: none;
        color: white;
        cursor: pointer;
        letter-spacing: 0.15em;
        text-transform: uppercase;
        box-sizing: border-box;
        border: solid white;
        border-width: 2px;
        border-radius: 50px 50px 50px 50px;
        margin-top: 10px;
        padding: 10px;
        transition: background-color linear 0.5s;
    }

        #addButton:hover {
            background-color: rgba(0, 255, 255, 0.4);
        }

    #backButton {
        position: fixed;
        left: 0;
        bottom: 0;
        z-index: 10000;
        text-decoration: none;
        color: white;
        cursor: pointer;
        letter-spacing: 0.15em;
        text-transform: uppercase;
        margin-left: 2vh;
        box-sizing: border-box;
        border: solid white;
        border-width: 2px;
        border-radius: 50px 50px 50px 50px;
        padding: 10px;
        transition: background-color linear 0.5s;
    }

        #backButton:hover {
            background-color: rgba(0, 255, 255, 0.4);
        }

    #breadcrumb {
        position: absolute;
        top: 0px;
        width: 100%;
    }

    .breadcrumb-item {
        font-size: 25px;
    }

    .breadcrumb {
        top: 0;
        background-color: #33363b !important;
        padding-left: 60px !important;
    }

    #profile {
        position: relative;
        z-index: 7979;
        margin-left: auto;
        margin-bottom: auto;
        height: 61px;
        width: 20%;
        background-color: #33363b;
        transform: translateX(-3px);
    }

        #profile a {
            display: table;
            font-family: 'Raleway', sans-serif;
            font-weight: 200;
            font-size: 25px;
            text-decoration: none !important;
            color: #5a9ad6;
            line-height: 61px;
            vertical-align: middle;
            margin-left: auto;
            margin-right: auto;
        }

    .glyphicon {
        margin-left: 6px;
    }

    .dropdown-menu {
        background-color: #33363b;
    }

        .dropdown-menu li a {
            color: #5a9ad6;
        }

    #vehiclesTable {
        font-size: 15px;
    }

    h2 {
        text-align: center;
    }

    #calendar {
        background: white;
        border: 10px solid white;
        border-radius: 10px;
    }

    ::-webkit-scrollbar-thumb {
        background-color: lightgrey !important;
    }
</style>
<script>
    $(document).ready(function () {
        var events = [];
        var businessHours = [];

        var selectedEvent = null;
        var eventStart = "";
        var manufacturer;
        var model;
        var type;

        $.ajax({
            type: "GET",
            url: "/AddEquipmentBooking/GetEvents",
            success: function (data) {

                $.each(data, function (i, v) {
                    events.push({
                        title: moment(v.StartTime).format("H:mma") + "-" + moment(v.EndTime).format("H:mma"),
                        bookingid: v.BookingID,
                        start: moment(v.DateBooked + " " + moment(v.StartTime).format("HH:mm:ss")).format("MM/DD/YYYY HH:mm:ss"),
                        end: moment(v.DateBooked + " " + moment(v.EndTime).format("HH:mm:ss")).format("MM/DD/YYYY HH:mm:ss"),
                        pagesprinted: v.PagesPrinted,
                        manufacturer: v.Manufacturer,
                        model: v.Model,
                        equiptype: v.EquipType,
                        projectname: v.ProjectName,
                        username: v.UserName,
                        //color: blue,
                        allDay: false
                    });
                })

                $.ajax({
                    type: "GET",
                    url: "/AddEquipmentBooking/GetScheduleEvents",
                    success: function (scheduleData) {
                        $.each(scheduleData, function (i, v) {
                            businessHours.push({
                                start: v.start,
                                end: v.end,
                                overlap: false,
                                dow: [v.dow]
                            });
                        })

                        GenerateCalender(events, businessHours);
                    }
                })
            },
            error: function (error) {
                console.log(error);
                alert('failed');
            }
        })

        function GenerateCalender(events, businessHours) {
            $('#calendar').fullCalendar('destroy');
            $('#calendar').fullCalendar({
                themeSystem: 'jquery-ui',
                allDaySlot: false,
                businessHours: businessHours,
                contentHeight: 400,
                defaultDate: new Date(),
                defaultTimedEventDuration: '01:00:00',
                defaultView: 'agendaWeek',
                displayEventTime: false,
                displayEventEnd: false,
                editable: false,
                eventLimit: true,
                eventColor: '#007fff',
                eventConstraint: 'businessHours',
                eventOverlap: false,
                events: events,
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'month,agendaWeek,agendaDay'
                },
                slotDuration: '01:00:00',
                slotEventOverlap: false,
                selectConstraint: 'businessHours',
                selectable: true,
                timeFormat: 'h(:mm)a',
                timezone: 'local',
                select: function (start, end, jsEvent, view) {
                    if (start.isAfter(moment().format("MM/DD/YYYY HH:mm:ss"))) {
                        $.each(businessHours, function (index, b) {
                            if (jQuery.inArray(start.day(), b.dow) != -1) {
                                var startTime = moment(start).format('HH:mm:ss');
                                var inStartTime = moment(b.start).format('HH:mm:ss');
                                var inEndTime = moment(b.end).format('HH:mm:ss');
                                eventStart = start;
                                if (startTime < inEndTime && startTime >= inStartTime) {
                                    $('#bookingStartTime').timepicker({
                                        step: 60,
                                    });
                                    $('#bookingStartTime').timepicker('setTime', moment(start).format("h:mmA"));

                                    manufacturer = '@Session["manufacturer"]';
                                    model = '@Session["model"]';
                                    type = '@Session["type"]';

                                    $('#bookingReason').val(type + ": " + manufacturer + " " + model);
                                    $('#bookingReason').attr('readonly', true);
                                    $('#bookingStartTime').attr('readonly', true);

                                    $('#bookingEndTime').timepicker({
                                        'minTime': moment(start).format("h:mmA"),
                                        'maxTime': moment(b.end).format("h:mmA"),
                                        'showDuration': true,
                                        step: 60
                                    });

                                    $('#bookingEndTime').timepicker('option', {
                                        'minTime': moment(start).format("h:mmA"),
                                        'maxTime': moment(b.end).format("h:mmA"),
                                        'showDuration': true,
                                        step: 60
                                    });

                                    maxTime = moment(b.end).format("h:mmA");

                                    var calendar = $('#calendar').fullCalendar('clientEvents', function (evt) {
                                        return evt.start.format("MM/DD/YYYY") == start.format("MM/DD/YYYY");
                                    });

                                    var target = start;
                                    var closest;
                                    var latestEvent;
                                    $.each(calendar, function (index, c) {
                                        if (calendar.length > 1) {
                                            if (latestEvent == null) {
                                                latestEvent = moment(c.start).format('HH');
                                            } else {
                                                if (moment(c.start).format('HH') > latestEvent) {
                                                    latestEvent = moment(c.start).format('HH');
                                                }
                                            }
                                        }
                                        else {
                                            latestEvent = moment(c.start).format('HH');
                                        }
                                    });

                                    if (moment(latestEvent, 'HH').format("HH:mmA") != moment(start).format("HH:mmA")) {
                                        $.each(calendar, function (index, c) {
                                            if (calendar.length > 1) {
                                                if (moment(c.start).format('HH:mm') > moment(target).format('HH:mm')) {
                                                    if (closest == null) {
                                                        closest = moment(c.start).format('HH');
                                                    } else if (moment(c.start).format('HH') < closest) {
                                                        closest = moment(c.start).format('HH');
                                                    }

                                                }
                                            } else if (start.format("HH:mm") < moment(c.start).format("HH:mm")) {
                                                $('#bookingEndTime').val("");
                                                $('#bookingEndTime').timepicker('option', {
                                                    'minTime': start.format("HH:mmA"),
                                                    'maxTime': moment(c.start).format("HH:mmA"),
                                                    'showDuration': true,
                                                    step: 60
                                                });
                                                maxTime = moment(c.start).format("HH:mmA");
                                                return false;
                                            }
                                            if (calendar.length - 1 == index) {
                                                if (moment(closest, 'HH').format("HH:mmA") == moment(start).format("HH:mmA") || closest == undefined) {
                                                    $('#bookingEndTime').val("");
                                                    $('#bookingEndTime').timepicker('option', {
                                                        'minTime': start.format("HH:mmA"),
                                                        'maxTime': maxTime,
                                                        'showDuration': true,
                                                        step: 60
                                                    });
                                                } else {
                                                    $('#bookingEndTime').val("");
                                                    $('#bookingEndTime').timepicker('option', {
                                                        'minTime': start.format("HH:mmA"),
                                                        'maxTime': moment(closest, 'HH').format("HH:mmA"),
                                                        'showDuration': true,
                                                        step: 60
                                                    });
                                                    maxTime = moment(closest, 'HH').format("HH:mmA");
                                                }

                                                return false;
                                            }
                                        });
                                    } else {
                                        $('#bookingEndTime').val("");
                                        $('#bookingEndTime').timepicker('option', {
                                            'minTime': start.format("HH:mmA"),
                                            'maxTime': maxTime,
                                            'showDuration': true,
                                            step: 60
                                        });
                                    }
                                    if (moment(latestEvent, 'HH').format("HH:mmA") < moment(start).format("HH:mmA")) {
                                        $('#bookingEndTime').val("");
                                        $('#bookingEndTime').timepicker('option', {
                                            'minTime': start.format("HH:mmA"),
                                            'maxTime': maxTime,
                                            'showDuration': true,
                                            step: 60
                                        });
                                    }

                                    $('#max').val(maxTime);
                                    $('#bookingEndTime').attr('placeholder', moment(start).add(1, 'hour').format("h:mmA") + ', if left empty');
                                    $('#createEventModal').appendTo("body").modal('show');
                                    return false;
                                }
                            }
                        })
                    }
                    else {
                        swal("Cannot book appointments in the past", {
                            icon: 'warning'
                        });
                    }

                },
                eventClick: function (calEvent, jsEvent, view) {
                    //added in code for CRUDS
                    selectedEvent = calEvent;
                    //////////////////////////
                    $('#myModal #eventTitle').text(calEvent.equiptype + ": " + calEvent.manufacturer + " " + calEvent.model);
                    var $description = $('<div/>');
                    $description.append('<p style="display: inline; font-weight:bold"><b>Date Booked for:</b></p> <p style="display: inline; font-weight:550">' + moment(calEvent.start).format("Do MMMM YYYY") + '</p><br>');
                    $description.append('<p style="display: inline; font-weight:bold"><b>Start:</b></p> <p style="display: inline; font-weight:550">' + calEvent.start.format("hh:mma") + '</p><br>');
                    if (calEvent.end != null) {
                        $description.append('<p style="display: inline; font-weight:bold"><b>End:</b></p> <p style="display: inline; font-weight:550">' + calEvent.end.format("hh:mma") + '</p><br>');
                    }
                    if (calEvent.pagesprinted != 0 && calEvent.pagesprinted != undefined && calEvent.pagesprinted != null) {
                        $description.append('<p style="display: inline; font-weight:bold"><b>Pages printed:</b></p> <p style="display: inline; font-weight:550">' + calEvent.pagesprinted + '</p><br>');
                    } else {
                        $description.append('<p style="display: inline; font-weight:bold"><b>Pages printed:</b></p> <p style="display: inline; font-weight:550">Not yet recorded</p><br>');
                    }
                    $description.append('<p style="display: inline; font-weight:bold"><b>Booking is for Project:</b></p> <p style="display: inline; font-weight:550">' + calEvent.projectname + '</p><br>');
                    $description.append('<p style="display: inline; font-weight:bold"><b>Person using Equipment in Booking:</b></p> <p style="display: inline; font-weight:550">' + calEvent.username + '</p><br>');
                    $description.append('<p style="display: inline; font-weight:bold"><u style="font-weight: bold">Equipment Details</u></p><br>');
                    $description.append('<p style="display: inline; font-weight:bold"><b>Manufacturer Name:</b></p> <p style="display: inline; font-weight:550">' + calEvent.manufacturer + '</p><br>');
                    $description.append('<p style="display: inline; font-weight:bold"><b>Model:</b></p> <p style="display: inline; font-weight:550">' + calEvent.model + '</p><br>');
                    $description.append('<p style="display: inline; font-weight:bold"><b>Type:</b></p> <p style="display: inline; font-weight:550">' + calEvent.equiptype + '</p><br>');

                    $('#myModal #pDetails').empty().html($description);

                    $("#myModal").appendTo("body").modal('show');
                },
                eventRender: function (event, element) {
                    //$(element).tooltip({ title: event.title });
                    element.popover({
                        title: event.title,
                        html: true,
                        content: "<p style='display: inline; font-weight:bold'>For Project:</p> " + event.projectname + "<br />"
                            + "<p style='display: inline; font-weight:bold'>User of Equipment:</p> " + event.username,
                        trigger: 'hover',
                        placement: 'top',
                        container: 'body'
                    });
                }
            })
        }

        $('#submitButton').on('click', function (e) {
            // We don't want this to act as a link so cancel the link action
            e.preventDefault();

            doSubmit();
        });

        $('#submitEditButton').on('click', function (e) {
            // We don't want this to act as a link so cancel the link action
            e.preventDefault();

            doEditSubmit();
        });

        $('#submitAdjustButton').on('click', function (e) {
            // We don't want this to act as a link so cancel the link action
            e.preventDefault();

            doAdjustSubmit();
        });

        $('#btnEdit').on('click', function (e) {
            // We don't want this to act as a link so cancel the link action
            e.preventDefault();
            $("#myModal").modal('hide');

            if (moment(selectedEvent.start).isAfter(moment().format("MM/DD/YYYY HH:mm:ss"))) {
                $("#bookingReasonEdit").val(type + ": " + manufacturer + " " + model);
                $('#bookingReasonEdit').attr('readonly', true);
                $("#bookingStartTimeEdit").val(moment(selectedEvent.start).format('hh:mma'));
                $('#bookingStartTimeEdit').attr('readonly', true);
               
                if (!(selectedEvent.max != null & selectedEvent.max != undefined && selectedEvent.max != 0)) {
                    start = selectedEvent.start;
                    $.each(businessHours, function (index, b) {
                        if (jQuery.inArray(start.day(), b.dow) != -1) {
                            var startTime = moment(start).format('HH:mm:ss');
                            var inStartTime = moment(b.start).format('HH:mm:ss');
                            var inEndTime = moment(b.end).format('HH:mm:ss');
                            eventStart = start;
                            if (startTime < inEndTime && startTime >= inStartTime) {
                                $('#bookingEndTimeEdit').timepicker({
                                    'minTime': moment(start).format("HH:mmA"),
                                    'maxTime': moment(b.end).format("HH:mmA"),
                                    'showDuration': true,
                                    step: 60
                                });

                                $('#bookingEndTimeEdit').timepicker('option', {
                                    'minTime': moment(start).format("HH:mmA"),
                                    'maxTime': moment(b.end).format("HH:mmA"),
                                    'showDuration': true,
                                    step: 60
                                });

                                maxTime = moment(b.end).format("HH:mmA");

                                var calendar = $('#calendar').fullCalendar('clientEvents', function (evt) {
                                    return evt.start.format("MM/DD/YYYY") == start.format("MM/DD/YYYY");
                                });

                                var target = start;
                                var closest;
                                var latestEvent;
                                $.each(calendar, function (index, c) {
                                    if (calendar.length > 1) {
                                        if (latestEvent == null) {
                                            latestEvent = moment(c.start).format('HH');
                                        } else {
                                            if (moment(c.start).format('HH') > latestEvent) {
                                                latestEvent = moment(c.start).format('HH');
                                            }
                                        }
                                    } else {
                                        latestEvent = moment(c.start).format('HH');
                                    }
                                });

                                if (moment(latestEvent, 'HH').format("HH:mmA") != moment(start).format("HH:mmA")) {
                                    $.each(calendar, function (index, c) {
                                        if (calendar.length > 1) {
                                            if (moment(c.start).format('HH:mm') > moment(target).format('HH:mm')) {
                                                if (closest == null) {
                                                    closest = moment(c.start).format('HH');
                                                } else {
                                                    if (moment(c.start).format('HH') < closest) {
                                                        closest = moment(c.start).format('HH');
                                                    }
                                                }
                                            }
                                        } else if (start.format("HH:mm") < moment(c.start).format("HH:mm")) {
                                            $('#bookingEndTimeEdit').timepicker('option', {
                                                'minTime': start.format("HH:mmA"),
                                                'maxTime': moment(c.start).format("HH:mmA"),
                                                'showDuration': true,
                                                step: 60
                                            });
                                            maxTime = moment(c.start).format("HH:mmA");
                                            return false;
                                        }
                                        if (calendar.length - 1 == index) {
                                            if (moment(closest, 'HH').format("HH:mmA") == moment(start).format("HH:mmA") || closest == undefined) {
                                                $('#bookingEndTimeEdit').timepicker('option', {
                                                    'minTime': start.format("HH:mmA"),
                                                    'maxTime': maxTime,
                                                    'showDuration': true,
                                                    step: 60
                                                });
                                            } else {
                                                $('#bookingEndTimeEdit').timepicker('option', {
                                                    'minTime': start.format("HH:mmA"),
                                                    'maxTime': moment(closest, 'HH').format("HH:mmA"),
                                                    'showDuration': true,
                                                    step: 60
                                                });
                                                maxTime = moment(closest, 'HH').format("HH:mmA");
                                            }
                                            return false;
                                        }
                                    });
                                } else {
                                    $('#bookingEndTimeEdit').timepicker('option', {
                                        'minTime': start.format("HH:mmA"),
                                        'maxTime': maxTime,
                                        'showDuration': true,
                                        step: 60
                                    });
                                }
                                if (moment(latestEvent, 'HH').format("HH:mmA") < moment(start).format("HH:mmA")) {
                                    $('#bookingEndTimeEdit').timepicker('option', {
                                        'minTime': start.format("HH:mmA"),
                                        'maxTime': maxTime,
                                        'showDuration': true,
                                        step: 60
                                    });
                                }


                                $('#max').val(maxTime);
                                $("#bookingEndTimeEdit").val(moment(selectedEvent.end).format("HH:mma"));
                                $('#bookingEndTimeEdit').attr('placeholder', moment(start).add(1, 'hour').format("HH:mmA") + ', if left empty');
                                return false;
                            }
                        }
                    })
                } else {
                    $("#bookingEndTimeEdit").val(moment(selectedEvent.end).format('HH:mma'));
                    $("#bookingEndTimeEdit").timepicker('option', {
                        'minTime': moment(selectedEvent.end).format('HH:mma'),
                        'maxTime': selectedEvent.max,
                        step: 60
                    });
                }

                $('#ddlProjectsEdit option').filter(function () {
                    return $(this).text() == selectedEvent.projectname;
                })
                .prop('selected', true);
                $('#ddlUsersEdit option').filter(function () {
                    return $(this).text() == selectedEvent.username;
                })
               .prop('selected', true);

                $("#myModalSave").appendTo("body").modal('show');
            } else if (moment(selectedEvent.end).isAfter(moment().format("MM/DD/YYYY HH:mm:ss"))) {
                swal("You cannot edit an Equipment Booking while is is currently busy.", { icon: "warning" })
            } else {
                var span = document.createElement("span");
                span.innerHTML = "You cannot edit an Equipment Booking after it has already happened.<br/>"
                    + "If you would like to adjust the pages printed in the booking, then please select the Adjust Pages Printed button";
                swal({
                    icon: "error",
                    content: span
                })
            }
        });

        $('#btnAdjust').on('click', function (e) {
            // We don't want this to act as a link so cancel the link action
            e.preventDefault();
            $("#myModal").modal('hide');

            if (!moment(selectedEvent.start).isAfter(moment().format("MM/DD/YYYY HH:mm:ss"))) {
                $("#bookingReasonAdjust").val(selectedEvent.equiptype + ": " + selectedEvent.manufacturer + " " + selectedEvent.model);
                $('#bookingReasonAdjust').attr('readonly', true);
                $("#bookingStartTimeAdjust").val(moment(selectedEvent.start).format('hh:mma'));
                $('#bookingStartTimeAdjust').attr('readonly', true);
                $("#bookingEndTimeAdjust").val(moment(selectedEvent.end).format('hh:mma'));
                $('#bookingEndTimeAdjust').attr('readonly', true);
                $('#bookingProjectAdjust').val(selectedEvent.projectname);
                $('#bookingProjectAdjust').attr('readonly', true);
                $('#bookingUserAdjust').val(selectedEvent.username);
                $('#bookingUserAdjust').attr('readonly', true);
                if (selectedEvent.pagesprinted != null && selectedEvent.pagesprinted != 0) {
                    $('#bookingPagesAdjust').val(selectedEvent.pagesprinted);
                } else {
                    $('#bookingPagesAdjust').val(0);
                }

                $("#myModalAdjust").appendTo("body").modal('show');
            }
            else {
                swal("You cannot adjust the Pages Printed in an Equipment Booking before it has taken place.", { icon: "warning" })
            }
        });

        $('#btnRemove').on('click', function (e) {
            e.preventDefault();

            if (moment(selectedEvent.start).isAfter(moment().format("MM/DD/YYYY HH:mm:ss"))) {
                $('#calendar').fullCalendar('removeEvents', function (evt) {
                    return evt == selectedEvent;
                });

                $.ajax({
                    url: '@Url.Action("Remove", "AddEquipmentBooking")',
                    type: 'POST',
                    data: "{ bookingID: " + JSON.stringify(selectedEvent.bookingid) + "}",
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    success: function (data) {
                        if (data.ResultValue != "Error") {
                            swal("The Equipment Booking has successfully been removed", { icon: "success" });
                        } else {
                            swal("Something went wrong.", { icon: "error" });
                        }
                    }
                });

                $("#myModal").modal('hide');
            } else if (moment(selectedEvent.end).isAfter(moment().format("MM/DD/YYYY HH:mm:ss"))) {
                swal("You cannot remove an Equipment Booking while is is currently busy.", { icon: "warning" });
            } else {
                swal("You cannot remove an Equipment Booking after it has already happened.", { icon: "warning" });
            }
        });

        $('#btnRemovePages').on('click', function (e) {
            e.preventDefault();

            if (selectedEvent.pagesprinted != null || selectedEvent.pagesprinted != 0) {
                calendar = selectedEvent;
                calendar.odoend = null;
                calendar.allDay = false;

                $.ajax({
                    url: '@Url.Action("RemovePages", "AddEquipmentBooking")',
                    type: 'POST',
                    data: "{ bookingID: " + JSON.stringify(selectedEvent.bookingid) + "}",
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    success: function (data) {
                        if (data.ResultValue != "Error") {
                            swal("The Amount of Pages printed linked to this Booking has been successfully removed", { icon: "success" });
                        } else {
                            swal("Something went wrong.", { icon: "error" });
                        }
                    }
                });

                $("#calendar").fullCalendar('updateEvent', calendar);
                swal("The Odometer reading linked to this Booking has been successfully removed", { icon: "success" });
            } else {
                swal("You cannot remove the Odometer Reading from the current booking as it has not been set yet.", { icon: "warning" });
            }
        });

        function doSubmit() {
            $("#createEventModal").modal('hide');
            var start = moment(eventStart).format("MM/DD/YYYY HH:mm:ss");
            var startHour = moment(start).hour();

            getEndHour = function () {
                var startVal = $('#bookingStartTime').val();
                var val = $('#bookingEndTime').val()

                if (val == startVal || val == "") {
                    return moment(eventStart).add(1, 'hour').hour();
                }
                else {
                    return moment(val, "HH:mma").hour();
                }
            }

            var endHour = getEndHour();
            var end = moment(eventStart).add(endHour - startHour, 'hour').format("MM/DD/YYYY HH:mm:ss");

            var events = $("#calendar").fullCalendar('clientEvents');
            var latestID;

            $.each(events, function (index, e) {
                if (latestID == 0 || latestID == null || latestID == undefined) {
                    latestID = e.bookingid;
                } else if (e.bookingid > latestID) {
                    latestID = e.bookingid;
                }
            });

            var object = {
                BookingID: latestID + 1,
                EquipmentBookingID: latestID + 1,
                PagesPrinted: 0,
                DateBooked: moment(start).format('MM/DD/YYYY'),
                TimeIn: moment(start).format('HH:mm:ss'),
                TimeOut: moment(end).format('HH:mm:ss'),
                UserID: $('#ddlUsers option:selected').val(),
                ProjectID: $('#ddlProjects option:selected').val()
            };

            $("#calendar").fullCalendar('renderEvent',
                {
                    bookingid: latestID + 1,
                    title: moment(start).format("hh:mma") + "-" + moment(end).format("hh:mma"),
                    start: start,
                    end: end,
                    manufacturer: manufacturer,
                    model: model,
                    equiptype: type,
                    pagesprinted: 0,
                    username: $('#ddlUsers option:selected').text(),
                    projectname: $('#ddlProjects option:selected').text(),
                    max: $('#max').val()
                },
                true);

            $.ajax({
                url: '@Url.Action("Add", "AddEquipmentBooking")',
                type: 'POST',
                data: '{booking: ' + JSON.stringify(object) + '}',
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function (data) {
                    if (data.ResultValue != "Error") {
                        swal("The Equipment Booking has successfully been added", { icon: "success" });
                    } else {
                        swal("Something went wrong.", { icon: "error" });
                    }
                }
            });
        }

        function doEditSubmit() {
            $("#myModalSave").modal('hide');

            calendar = selectedEvent;
            calendar.end = moment(moment(calendar.start.format("MM/DD/YYYY") + " " + $('#bookingEndTimeEdit').val(), "MM/DD/YYYY h:mma").format("MM/DD/YYYY HH:mm:ss"));
            calendar.title = moment(calendar.start).format("hh:mma") + "-" + moment(calendar.end).format("hh:mma");
            calendar.projectname = $('#ddlProjectsEdit option:selected').text();
            calendar.username = $('#ddlUsersEdit option:selected').text();
            calendar.allDay = false;

            var object = {
                BookingID: selectedEvent.bookingid,
                TimeOut: moment($('#bookingEndTimeEdit').val(), 'h:mma').format('HH:mm:ss'),
                UserID: $('#ddlUsersEdit option:selected').val(),
                ProjectID: $('#ddlProjectsEdit option:selected').val()
            };

            $.ajax({
                url: '@Url.Action("Edit", "AddEquipmentBooking")',
                type: 'POST',
                data: '{booking: ' + JSON.stringify(object) + '}',
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function (data) {
                    if (data.ResultValue != "Error") {
                        swal("The Equipment Booking has successfully been updated", { icon: "success" });
                    } else {
                        swal("Something went wrong.", { icon: "error" });
                    }
                }
            });

            $("#calendar").fullCalendar('updateEvent', calendar);
        }

        function doAdjustSubmit() {
            $("#myModalAdjust").modal('hide');

            calendar = selectedEvent;
            calendar.pagesprinted = $('#bookingPagesAdjust').val();
            calendar.allDay = false;

            var object = {
                BookingID: selectedEvent.bookingid,
                PagesPrinted: $('#bookingPagesAdjust').val()
            };

            $.ajax({
                url: '@Url.Action("Adjust", "AddEquipmentBooking")',
                type: 'POST',
                data: '{booking: ' + JSON.stringify(object) + '}',
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function (data) {
                    if (data.ResultValue != "Error") {
                        swal("The amount of Pages Printed in the Booking has successfully been updated", { icon: "success" });
                    } else {
                        swal("Something went wrong.", { icon: "error" });
                    }
                }
            });

            $("#calendar").fullCalendar('updateEvent', calendar);
        }

        // Select your input element.
        var number = document.getElementById('bookingPagesAdjust');

        // Listen for input event on numInput.
        number.onkeydown = function (e) {
            if (!((e.keyCode > 95 && e.keyCode < 106)
              || (e.keyCode > 47 && e.keyCode < 58)
              || e.keyCode == 8)) {
                return false;
            }
        }
    })
</script>